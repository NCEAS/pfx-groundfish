#params for state 1#
#mean#
u_st1 <- 50#
#sd#
sd_1 <- 50#
#number of points#
n_1 <- 25
u_st2 <- 800#
sd_2 <- 10#
n_2 <- 25#
#
#number of cycles#
cycles <- 7#
# Create a vector of data that is just state 1 pasted onto state 2 with some "randomeness" associated with each state #
#
m <- c(abs(rnorm(n_1, mean=u_st1, sd=sd_1)), abs(rnorm(n_2, mean=u_st2, sd=sd_2)))#
# create a covariate basically the index that the data point occurs in the cycle#
index <- 1:length(m)#
for(i in 1:(cycles-1)){#
    x <- c(abs(rnorm(n_1, mean=u_st1, sd=sd_1)), abs(rnorm(n_2, mean=u_st2, sd=sd_2)))#
    m <- c(m, x)#
    index <- c(index, 1:length(x))#
}#
plot(m, type="b", ylim = rev(range(m)))#
#plot(diff(m), type="b")#
plot(index, type="b")
cat("#
    model#
{#
#
    first.loc[1] <- y[1]#
    #    DCRWS model from Ian D Jonsen, Joanna Mills Flemming and Ransom A Myers#
    #    Robust state-space modeling of animal movement data#
    #    ijonsen@dal.ca#
    #    Created by Ian Jonsen, 10/29/2004, last modified, 01/08/2013#
    ## priors on process uncertainty#
    proTau ~ dgamma(0.001,0.001);#
    proSig <- 1/sqrt(proTau);#
    # Gamma represent the movement rates / time#
    gamma[1] ~ dnorm(0, 1)T(0,);   ## prior for gamma in b=1#
    dev ~ dnorm(0, 1)T(0,);			## rnd deviate to ensure gamma[2] > gamma[1]#
    gamma[2] <- gamma[1] + dev; #
    alpha[1] ~ dbeta(1, 1);		## prob of being in b 1 at t, given in b 1 at t-1#
    alpha[2] ~ dbeta(1, 1);		## prob of being in b 1 at t, given in b 2 at t-1#
    lambda[1] ~ dunif(0, 1);#
    lambda[2] <- 1 - lambda[1];#
    b[1] ~ dcat(lambda[]); 		## assign b for first obs#
    ## Priors for first location#
    x[1] ~ dnorm(first.loc[1],0.01);#
    ## Assume simple random walk to estimate 2nd regular position#
    x[2] ~ dnorm(x[1], proTau);#
    #for(i in 1:2) {#
        #coef.1[i]~dnorm(0,1);#
        #coef.2[i]~dnorm(0,1);#
    #}#
    ## Transition equation#
    ##	Measurement equation#
    obsTau ~ dgamma(0.001,0.001);#
    obsSig <- 1/sqrt(obsTau);    #
    for(t in 2:(RegN-1)){#
        phi[t,1] <- alpha[b[t-1]];#
        phi[t,2] <- 1 - alpha[b[t-1]];#
        b[t] ~ dcat(phi[t,]); # b[t] is the categorical state#
        #pred.x[t] <- gamma[b[t]];#
            #+ coef.1[b[t]]*covar1[t];#
            #+ coef.2[b[t]]*covar2[t];  #
        y[t] ~ dnorm(gamma[b[t]],obsTau);      	#
        #x[t+1] ~ dnorm(pred.x[t], proTau);	#
    }#
}#
    ", file = "model2.txt")
y = m#
covar1 = index#
#
RegN = length(y) # don't change this line#
#
jags.data = list("y"=y,"RegN"=RegN)#
                 #,"covar1"=covar1)#
                 #"covar2"=covar2)#
jags.params=c("b","x")#
              #,"coef.1")#
              #"coef.2")
jags.params=c("b")#
              #,"coef.1")#
              #"coef.2")
model.loc=("model2.txt")#
sim.model = jags(jags.data, inits=NULL, parameters.to.save= jags.params, model.file=model.loc, n.chains = mcmc.chains, n.burnin = mcmc.burn, n.thin = mcmc.thin, n.iter = mcmc.chainLength, DIC = TRUE)
library(R2jags)
model.loc=("model2.txt")#
sim.model = jags(jags.data, inits=NULL, parameters.to.save= jags.params, model.file=model.loc, n.chains = mcmc.chains, n.burnin = mcmc.burn, n.thin = mcmc.thin, n.iter = mcmc.chainLength, DIC = TRUE)
#MCMC paramaters#
mcmc.chainLength <- as.integer(6000)  # post-burn #
mcmc.burn <- as.integer(5000) #
mcmc.thin = 1#
mcmc.chains = 1
model.loc=("model2.txt")#
sim.model = jags(jags.data, inits=NULL, parameters.to.save= jags.params, model.file=model.loc, n.chains = mcmc.chains, n.burnin = mcmc.burn, n.thin = mcmc.thin, n.iter = mcmc.chainLength, DIC = TRUE)
attach.jags(sim.model)
plot(m, type="b", ylim=rev(range(m)))#
plot(apply(b,2,mean), type="b")
m
plot(m)
plot(m, type="b", ylim=rev(range(m)))
plot(apply(b,2,mean), type="b")
plot(m, type="b", ylim=rev(range(m)))#
lines(apply(b,2,mean), type="b",col='blue')
jags.params=c("b","gamma")#
              #,"coef.1")#
              #"coef.2")
model.loc=("model2.txt")#
sim.model = jags(jags.data, inits=NULL, parameters.to.save= jags.params, model.file=model.loc, n.chains = mcmc.chains, n.burnin = mcmc.burn, n.thin = mcmc.thin, n.iter = mcmc.chainLength, DIC = TRUE)
cat("#
    model#
{#
#
    first.loc[1] <- y[1]#
    #    DCRWS model from Ian D Jonsen, Joanna Mills Flemming and Ransom A Myers#
    #    Robust state-space modeling of animal movement data#
    #    ijonsen@dal.ca#
    #    Created by Ian Jonsen, 10/29/2004, last modified, 01/08/2013#
    ## priors on process uncertainty#
    proTau ~ dgamma(0.001,0.001);#
    proSig <- 1/sqrt(proTau);#
    # Gamma represent the movement rates / time#
    gamma[1] ~ dnorm(0, 1)T(0,);   ## prior for gamma in b=1#
    dev ~ dnorm(0, 1)T(0,);			## rnd deviate to ensure gamma[2] > gamma[1]#
    gamma[2] <- gamma[1] + dev; #
    alpha[1] ~ dbeta(1, 1);		## prob of being in b 1 at t, given in b 1 at t-1#
    alpha[2] ~ dbeta(1, 1);		## prob of being in b 1 at t, given in b 2 at t-1#
    lambda[1] ~ dunif(0, 1);#
    lambda[2] <- 1 - lambda[1];#
    b[1] ~ dcat(lambda[]); 		## assign b for first obs#
    ## Priors for first location#
    x[1] ~ dnorm(first.loc[1],0.01);#
    ## Assume simple random walk to estimate 2nd regular position#
    x[2] ~ dnorm(x[1], proTau);#
    #for(i in 1:2) {#
        #coef.1[i]~dnorm(0,1);#
        #coef.2[i]~dnorm(0,1);#
    #}#
    pred.x[1] <- gamma[b[1]];#
    ## Transition equation#
    ##	Measurement equation#
    obsTau ~ dgamma(0.001,0.001);#
    obsSig <- 1/sqrt(obsTau);    #
    for(t in 2:(RegN-1)){#
        phi[t,1] <- alpha[b[t-1]];#
        phi[t,2] <- 1 - alpha[b[t-1]];#
        b[t] ~ dcat(phi[t,]); # b[t] is the categorical state#
        #pred.x[t] <- gamma[b[t]];#
            #+ coef.1[b[t]]*covar1[t];#
            #+ coef.2[b[t]]*covar2[t]; #
        pred.x[t] <- gamma[b[t]];#
        y[t] ~ dnorm(gamma[b[t]],obsTau);      	#
        #x[t+1] ~ dnorm(pred.x[t], proTau);	#
    }#
}#
    ", file = "model2.txt")#
#
#MCMC paramaters#
mcmc.chainLength <- as.integer(6000)  # post-burn #
mcmc.burn <- as.integer(5000) #
mcmc.thin = 1#
mcmc.chains = 1
y = m#
covar1 = index#
#
RegN = length(y) # don't change this line#
#
jags.data = list("y"=y,"RegN"=RegN)#
                 #,"covar1"=covar1)#
                 #"covar2"=covar2)#
jags.params=c("b","gamma")#
              #,"coef.1")#
              #"coef.2")
jags.params=c("b","x")#
              #,"coef.1")#
              #"coef.2")
model.loc=("model2.txt")#
sim.model = jags(jags.data, inits=NULL, parameters.to.save= jags.params, model.file=model.loc, n.chains = mcmc.chains, n.burnin = mcmc.burn, n.thin = mcmc.thin, n.iter = mcmc.chainLength, DIC = TRUE)
jags.params=c("b","pred.x")#
              #,"coef.1")#
              #"coef.2")#
model.loc=("model2.txt")#
sim.model = jags(jags.data, inits=NULL, parameters.to.save= jags.params, model.file=model.loc, n.chains = mcmc.chains, n.burnin = mcmc.burn, n.thin = mcmc.thin, n.iter = mcmc.chainLength, DIC = TRUE)  #
#
attach.jags(sim.model)
plot(m, type="b", ylim=rev(range(m)))
dim(pred.x)
apply(pred.x,2,mean)
pred.x[1,]
pred.x[2,]
RegN
dim(pred.x)
pred.x[,1]
hist(pred.x[,1])
hist(pred.x[,2])
apply(pred.x,2,mean)
plot(apply(pred.x,2,mean))
y
plot(y)
cat("#
    model#
{#
#
    first.loc[1] <- y[1]#
    #    DCRWS model from Ian D Jonsen, Joanna Mills Flemming and Ransom A Myers#
    #    Robust state-space modeling of animal movement data#
    #    ijonsen@dal.ca#
    #    Created by Ian Jonsen, 10/29/2004, last modified, 01/08/2013#
    ## priors on process uncertainty#
    proTau ~ dgamma(0.001,0.001);#
    proSig <- 1/sqrt(proTau);#
    # Gamma represent the movement rates / time#
    #gamma[1] ~ dnorm(0, 1)T(0,);   ## prior for gamma in b=1#
    #dev ~ dnorm(0, 1)T(0,);			## rnd deviate to ensure gamma[2] > gamma[1]#
    #gamma[2] <- gamma[1] + dev; #
    gamma[1] ~ dunif(0,1000);#
    dev ~ dunif(0,1000);#
    gamma[2] <- gamma[1] + dev;#
    alpha[1] ~ dbeta(1, 1);		## prob of being in b 1 at t, given in b 1 at t-1#
    alpha[2] ~ dbeta(1, 1);		## prob of being in b 1 at t, given in b 2 at t-1#
    lambda[1] ~ dunif(0, 1);#
    lambda[2] <- 1 - lambda[1];#
    b[1] ~ dcat(lambda[]); 		## assign b for first obs#
    ## Priors for first location#
    x[1] ~ dnorm(first.loc[1],0.01);#
    ## Assume simple random walk to estimate 2nd regular position#
    x[2] ~ dnorm(x[1], proTau);#
    #for(i in 1:2) {#
        #coef.1[i]~dnorm(0,1);#
        #coef.2[i]~dnorm(0,1);#
    #}#
    pred.x[1] <- gamma[b[1]];#
    ## Transition equation#
    ##	Measurement equation#
    obsTau ~ dgamma(0.001,0.001);#
    obsSig <- 1/sqrt(obsTau);    #
    for(t in 2:(RegN-1)){#
        phi[t,1] <- alpha[b[t-1]];#
        phi[t,2] <- 1 - alpha[b[t-1]];#
        b[t] ~ dcat(phi[t,]); # b[t] is the categorical state#
        #pred.x[t] <- gamma[b[t]];#
            #+ coef.1[b[t]]*covar1[t];#
            #+ coef.2[b[t]]*covar2[t]; #
        pred.x[t] <- gamma[b[t]];#
        y[t] ~ dnorm(gamma[b[t]],obsTau);      	#
        #x[t+1] ~ dnorm(pred.x[t], proTau);	#
    }#
}#
    ", file = "model2.txt")#
#
#MCMC paramaters#
mcmc.chainLength <- as.integer(6000)  # post-burn #
mcmc.burn <- as.integer(5000) #
mcmc.thin = 1#
mcmc.chains = 1#
y = m#
covar1 = index#
#
RegN = length(y) # don't change this line#
#
jags.data = list("y"=y,"RegN"=RegN)#
                 #,"covar1"=covar1)#
                 #"covar2"=covar2)#
jags.params=c("b","pred.x")#
              #,"coef.1")#
              #"coef.2")#
model.loc=("model2.txt")#
sim.model = jags(jags.data, inits=NULL, parameters.to.save= jags.params, model.file=model.loc, n.chains = mcmc.chains, n.burnin = mcmc.burn, n.thin = mcmc.thin, n.iter = mcmc.chainLength, DIC = TRUE)  #
#
attach.jags(sim.model)
plot(apply(pred.x,2,mean))
plot(m, type="b", ylim=rev(range(m)),col="black")#
#lines(apply(b,2,mean), type="b",col='blue')#
lines(apply(pred.x,2,mean),col="blue",lty=2)
library(R2jags)#
#
transients = read.csv(file.choose())#
nAnimals = dim(transients)[1]#
# make matrix of ages from 0 - 42#
Y = matrix(0, nAnimals, 42)#
for(i in 1:nAnimals) {#
	# fill in Y[i,] values#
	birthAges = transients[i,-c(1:2)] - transients[i,2]#
	indx = which(is.na(birthAges)==F)#
	Y[i,as.numeric(birthAges[indx])] = 1#
	Y[i,as.numeric(birthAges[indx])-1] = 0#
	Y[i,as.numeric(birthAges[indx])+1] = 0		#
}#
#
# Fill in the z matrix#
z = matrix(NA, nAnimals,42)#
for(i in 1:nAnimals) {#
	indx = which(Y[i,]==1)#
	z[i,indx] = 1#
	z[i,indx-1] = 0#
	z[i,indx+1] = 0#
}#
#
# truncate first 9 years#
z = z[,-c(1:8)]#
Y = Y[,-c(1:8)]#
z[,1] = 0 # 9 year olds can't give birth#
Y[,1] = NA#
z = z + 1#
#
model = cat("#
model {#
   # Set up occupancy modeling type framework for latent states#
   # state 1 = not pregnant#
   # state 2 = pregnant#
   #alpha[1] ~ dbeta(1,1);#prob of being in b 1 at t, given in b 1 at t-1(staying in state 1)#
   ## 1 minus alpha[1] = probability of switching out of state 1 to state 2 (becoming pregnant)#
   #alpha[2] <- 1;### prob of being in b 1 at t, given in b 2 at t-1 (switching from 2 to 1)#
   ## 1 minus alpha[2] = the probability of remaining in state 2 = 0#
   for(i in 1:5) {#
   		B[i]~dnorm(0,1);#
   }#
   for(ind in 1:nAnimals) {#
   	   for(a in 1:34) {#
   	   	   # probability of animal i in time t, ages 1:33#
   	   	   alpha[2,ind,a] <- 1;#
   	   	   logit(prob[ind,a]) <- B[1] + B[2] * (a+9) + B[3] * pow((a+9),2) + B[4]*pow((a+9),3) + B[5]*pow((a+9),4);#
   	   	   alpha[1,ind,a] <- 1-prob[ind,a];#
   	   }#
   }#
   #for(i in 1:nAnimals) {#
   #z[i,1] <- 1; # not pregnant in first state#
   #}#
   for(i in 1:nAnimals) {#
      for(j in 2:34) {#
         phi[i,j,1] <- alpha[z[i,j-1],i,j];#
         phi[i,j,2] <- 1 - alpha[z[i,j-1],i,j];#
         z[i,j] ~ dcat(phi[i,j,1:2]); # z[i] is the true state (2 = pregnant, 1 = not)#
         trueState[i,j] <- z[i,j] - 1; # convert to 0-1#
         Y[i,j] ~ dbern(trueState[i,j]);#
      }#
   }#
}#
#
", file = "model.txt")#
mcmc.chainLength <- as.integer(10000)  # burn-in plus post-burn#
mcmc.burn = as.integer(5000)#
mcmc.thin = 1#
mcmc.chains = 3     # needs to be at least 2 for DIC#
#
jags.params=c("B")#
jags.data = list("Y","z","nAnimals")#
model.loc = paste("model.txt",sep="")#
model = jags(jags.data, inits = NULL, parameters.to.save= jags.params, model.file=model.loc, n.chains = mcmc.chains, n.burnin = mcmc.burn, n.thin = mcmc.thin, n.iter = mcmc.chainLength, DIC = TRUE)#
#
attach.jags(model)#
#
estBirth = matrix(0, dim(B)[1],42)#
#
for(i in 1:dim(estBirth)[1]) {#
	estBirth[i,] = B[i,1] + B[i,2]*seq(1,42) + B[i,3]*(seq(1,42)^2) + B[i,4]*(seq(1,42)^3) + B[i,5]*(seq(1,42)^4)#
}
dim(estBirth)
apply(estBirth,2,mean)
estBirth = exp(estBirth)/(1+exp(estBirth))
apply(estBirth,2,mean)
plot(apply(estBirth,2,mean))
estBirth[,1:9] = 09
estBirth[,1:9] = 0
plot(apply(estBirth,2,mean))
34+9
model = cat("#
model {#
   # Set up occupancy modeling type framework for latent states#
   # state 1 = not pregnant#
   # state 2 = pregnant#
   #alpha[1] ~ dbeta(1,1);#prob of being in b 1 at t, given in b 1 at t-1(staying in state 1)#
   ## 1 minus alpha[1] = probability of switching out of state 1 to state 2 (becoming pregnant)#
   #alpha[2] <- 1;### prob of being in b 1 at t, given in b 2 at t-1 (switching from 2 to 1)#
   ## 1 minus alpha[2] = the probability of remaining in state 2 = 0#
   for(i in 1:5) {#
   		B[i]~dnorm(0,1);#
   }#
   for(ind in 1:nAnimals) {#
   	   for(a in 1:34) {#
   	   	   # probability of animal i in time t, ages 1:33#
   	   	   alpha[2,ind,a] <- 1;#
   	   	   logit(prob[ind,a]) <- B[1] + B[2] * (a+9) + B[3] * pow((a+9),2) + B[4]*pow((a+9),3) + B[5]*pow((a+9),4);#
   	   	   alpha[1,ind,a] <- 1-prob[ind,a];#
   	   }#
   }#
   pDetect~dunif(0,1);#
   for(i in 1:nAnimals) {#
      for(j in 2:34) {#
         phi[i,j,1] <- alpha[z[i,j-1],i,j];#
         phi[i,j,2] <- 1 - alpha[z[i,j-1],i,j];#
         z[i,j] ~ dcat(phi[i,j,1:2]); # z[i] is the true state (2 = pregnant, 1 = not)#
         trueState[i,j] <- pDetect*(z[i,j] - 1); # convert to 0-1#
         Y[i,j] ~ dbern(trueState[i,j]);#
      }#
   }#
}#
#
", file = "model.txt")
mcmc.chainLength <- as.integer(2000)  # burn-in plus post-burn#
mcmc.burn = as.integer(1000)#
mcmc.thin = 1#
mcmc.chains = 2     # needs to be at least 2 for DIC
jags.params=c("B")#
jags.data = list("Y","z","nAnimals")#
model.loc = paste("model.txt",sep="")#
model = jags(jags.data, inits = NULL, parameters.to.save= jags.params, model.file=model.loc, n.chains = mcmc.chains, n.burnin = mcmc.burn, n.thin = mcmc.thin, n.iter = mcmc.chainLength, DIC = TRUE)#
#
attach.jags(model)
jags.params=c("B","pDetect")#
jags.data = list("Y","z","nAnimals")#
model.loc = paste("model.txt",sep="")#
model = jags(jags.data, inits = NULL, parameters.to.save= jags.params, model.file=model.loc, n.chains = mcmc.chains, n.burnin = mcmc.burn, n.thin = mcmc.thin, n.iter = mcmc.chainLength, DIC = TRUE)#
#
attach.jags(model)
model
hist(pDetect)
hist(pDetect,100)
hist(B[,1])
hist(B[,2])
hist(B[,3])
hist(B[,4])
hist(deviance)
mcmc.chainLength <- as.integer(10000)  # burn-in plus post-burn#
mcmc.burn = as.integer(5000)#
mcmc.thin = 1#
mcmc.chains = 2     # needs to be at least 2 for DIC#
#
jags.params=c("B","pDetect")#
jags.data = list("Y","z","nAnimals")#
model.loc = paste("model.txt",sep="")#
model = jags(jags.data, inits = NULL, parameters.to.save= jags.params, model.file=model.loc, n.chains = mcmc.chains, n.burnin = mcmc.burn, n.thin = mcmc.thin, n.iter = mcmc.chainLength, DIC = TRUE)#
#
attach.jags(model)
setwd("/users/eric.ward/dropbox/PSC project 2015")
d = read.csv("agsurvive.csv")
dir()
setwd("/users/eric.ward/dropbox/PSC project 2015/04 SEAK Mark-recap")
d = read.csv("agsurvive.csv")
d
names(d)
unique(d$Mom)
moms = unique(d$Mom)
moms
class(moms)
moms = as.character(moms[which(moms!="?")])
moms
match(moms,d$ID..from.Matkin)
d$Birth.year[indx]
d = read.csv("agsurvive.csv")#
moms = unique(d$Mom)#
moms = as.character(moms[which(moms!="?")])#
indx = match(moms,d$ID..from.Matkin)
d$Birth.year[indx]
as.numeric(d$Birth.year[indx])
as.character(d$Birth.year[indx])
as.numeric(as.character(d$Birth.year[indx]))
moms = moms[-which(is.na(as.numeric(as.character(d$Birth.year[indx]))))] # drop moms that have birth year including "<"
moms
d = read.csv("agsurvive.csv")#
moms = unique(d$Mom)#
moms = as.character(moms[which(moms!="?")])#
moms = moms[-which(is.na(as.numeric(as.character(d$Birth.year[indx]))))] # drop moms that have birth year including "<"
moms
nAnimals = length(moms)
names(d)
d$Momd
d$Mom
i
moms = unique(d$Mom)#
moms = as.character(moms[which(moms!="?")])#
moms = moms[-which(is.na(as.numeric(as.character(d$Birth.year[indx]))))] # drop moms that have birth year including "<"#
nAnimals = length(moms)#
# make matrix of ages from 0 - 42
d = read.csv("agsurvive.csv")#
moms = unique(d$Mom)#
moms = as.character(moms[which(moms!="?")])#
moms = moms[-which(is.na(as.numeric(as.character(d$Birth.year[indx]))))] # drop moms that have birth year including "<"#
nAnimals = length(moms)#
# make matrix of ages from 0 - 42
i=1
indx = which(as.character(d$Mom)==moms[i])
indx
names(d)
d$Birth.year[indx]
as.character(as.numeric(d$Birth.year[indx]))
as.numeric(as.character(d$Birth.year[indx]))
d = read.csv("agsurvive.csv")#
moms = unique(d$Mom)#
moms = as.character(moms[which(moms!="?")])
d = read.csv("agsurvive.csv")#
moms = unique(d$Mom)#
moms = as.character(moms[which(moms!="?")])#
indx = match(moms,as.character(d$ID..from.Matkin.))
indx
d$Birth.year[indx]
moms = moms[-which(is.na(as.numeric(as.character(d$Birth.year[indx]))))]
moms
which(d$ID..from.Matkin.==moms[1])
indx = which(as.character(d$Mom)==moms[i])#
	as.numeric(as.character(d$Birth.year[indx])) - d$Birth.year[which(d$ID..from.Matkin.==moms[i])]
indx = which(as.character(d$Mom)==moms[i])#
	as.numeric(as.character(d$Birth.year[indx])) - d$Birth.year[which(d$ID..from.Matkin.==moms[i])]
indx = which(as.character(d$Mom)==moms[i])
indx
as.numeric(as.character(d$Birth.year[indx]))
d$Birth.year[which(d$ID..from.Matkin.==moms[i])]
as.numeric(as.character(d$Birth.year[indx])) - as.numeric(d$Birth.year[which(d$ID..from.Matkin.==moms[i])])
as.numeric(as.character(d$Birth.year[indx])) - as.numeric(d$Birth.year[which(d$ID..from.Matkin.==moms[i])])
as.numeric(as.character(d$Birth.year[indx])) - as.numeric(d$Birth.year[which(d$ID..from.Matkin.==moms[i])])
as.numeric(as.character(d$Birth.year[indx])) - as.numeric(d$Birth.year[which(d$ID..from.Matkin.==moms[i])])
as.numeric(as.character(d$Birth.year[indx]))
as.numeric(d$Birth.year[which(d$ID..from.Matkin.==moms[i])])
as.numeric(as.character(d$Birth.year[indx])) - as.numeric(as.character(d$Birth.year[which(d$ID..from.Matkin.==moms[i])]))
as.numeric(as.character(d$Birth.year[indx])) - as.numeric(as.character(d$Birth.year[which(d$ID..from.Matkin.==moms[i])]))
as.numeric(as.character(d$Birth.year[indx])) - as.numeric(as.character(d$Birth.year[which(d$ID..from.Matkin.==moms[i])]))
as.numeric(as.character(d$Birth.year[indx])) - as.numeric(as.character(d$Birth.year[which(d$ID..from.Matkin.==moms[i])]))
fac2num = function(x) {return(as.numeric(as.character(x)))}
moms
Y = matrix(0, nAnimals, 42)#
for(i in 1:nAnimals) {#
	indx = which(as.character(d$Mom)==moms[i])#
	ages = as.numeric(as.character(d$Birth.year[indx])) - as.numeric(as.character(d$Birth.year[which(d$ID..from.Matkin.==moms[i])])) # convert to age at birth#
    Y[i,ages] = 1#
}
Y
i=1
indx = which(as.character(d$Mom)==moms[i])#
	ages = as.numeric(as.character(d$Birth.year[indx])) - as.numeric(as.character(d$Birth.year[which(d$ID..from.Matkin.==moms[i])])) # convert to age at birth#
    Y[i,ages] = 1
i=2
indx = which(as.character(d$Mom)==moms[i])#
	ages = as.numeric(as.character(d$Birth.year[indx])) - as.numeric(as.character(d$Birth.year[which(d$ID..from.Matkin.==moms[i])])) # convert to age at birth#
    Y[i,ages] = 1
ages
indx
as.numeric(as.character(d$Birth.year[indx]))
indx
d[indx,]
Y
apply(Y[1,sum])
apply(Y,1,sum)
sum(Y)
i=nAnimals
nAnimals
moms
moms = unique(d$Mom)#
moms = as.character(moms[which(moms!="?")])#
indx = match(moms,as.character(d$ID..from.Matkin.))#
moms = moms[-which(is.na(as.numeric(as.character(d$Birth.year[indx]))))] # drop moms that have birth year including "<"#
nAnimals = length(moms)#
# make matrix of ages from 0 - 42#
Y = matrix(0, nAnimals, 42)#
for(i in 1:nAnimals) {#
	indx = which(as.character(d$Mom)==moms[i])#
	ages = as.numeric(as.character(d$Birth.year[indx])) - as.numeric(as.character(d$Birth.year[which(d$ID..from.Matkin.==moms[i])])) # convert to age at birth#
    Y[i,ages] = 1#
}#
indx = which(apply(Y,1,sum)==0)#
Y = Y[-indx,]#
moms = moms[-indx]
moms
d = read.csv("agsurvive.csv")#
moms = unique(d$Mom)#
moms = as.character(moms[which(moms!="?")])#
indx = match(moms,as.character(d$ID..from.Matkin.))#
moms = moms[-which(is.na(as.numeric(as.character(d$Birth.year[indx]))))] # drop moms that have birth year including "<"#
nAnimals = length(moms)#
# make matrix of ages from 0 - 42#
Y = matrix(0, nAnimals, 42)#
for(i in 1:nAnimals) {#
	indx = which(as.character(d$Mom)==moms[i])#
	ages = as.numeric(as.character(d$Birth.year[indx])) - as.numeric(as.character(d$Birth.year[which(d$ID..from.Matkin.==moms[i])])) # convert to age at birth#
    Y[i,ages] = 1#
}#
indx = which(apply(Y,1,sum)==0)#
Y = Y[-indx,]#
moms = moms[-indx]#
nAnimals = length(moms)#
# Fill in the z matrix#
z = matrix(NA, nAnimals,42)#
for(i in 1:nAnimals) {#
	indx = which(Y[i,]==1)#
	z[i,indx] = 1#
	z[i,indx-1] = 0#
	z[i,indx+1] = 0#
}
z
Y
z[2,12:13] = 1
z
d = read.csv("agsurvive.csv")#
moms = unique(d$Mom)#
moms = as.character(moms[which(moms!="?")])#
indx = match(moms,as.character(d$ID..from.Matkin.))#
moms = moms[-which(is.na(as.numeric(as.character(d$Birth.year[indx]))))] # drop moms that have birth year including "<"#
nAnimals = length(moms)#
# make matrix of ages from 0 - 42#
Y = matrix(0, nAnimals, 42)#
for(i in 1:nAnimals) {#
	indx = which(as.character(d$Mom)==moms[i])#
	ages = as.numeric(as.character(d$Birth.year[indx])) - as.numeric(as.character(d$Birth.year[which(d$ID..from.Matkin.==moms[i])])) # convert to age at birth#
    Y[i,ages] = 1#
}#
indx = which(apply(Y,1,sum)==0)#
Y = Y[-indx,]#
moms = moms[-indx]#
nAnimals = length(moms)#
# Fill in the z matrix#
z = matrix(NA, nAnimals,42)#
for(i in 1:nAnimals) {#
	indx = which(Y[i,]==1)#
	z[i,indx] = 1#
	z[i,indx-1] = 0#
	z[i,indx+1] = 0#
}#
z[2,12:13] = 1#
# truncate first 9 years#
z = z[,-c(1:8)]#
Y = Y[,-c(1:8)]#
z[,1] = 0 # 9 year olds can't give birth#
Y[,1] = NA#
z = z + 1
z
model = cat("#
model {#
   # Set up occupancy modeling type framework for latent states#
   # state 1 = not pregnant#
   # state 2 = pregnant#
   #alpha[1] ~ dbeta(1,1);#prob of being in b 1 at t, given in b 1 at t-1(staying in state 1)#
   ## 1 minus alpha[1] = probability of switching out of state 1 to state 2 (becoming pregnant)#
   #alpha[2] <- 1;### prob of being in b 1 at t, given in b 2 at t-1 (switching from 2 to 1)#
   ## 1 minus alpha[2] = the probability of remaining in state 2 = 0#
   for(i in 1:5) {#
   		B[i]~dnorm(0,1);#
   }#
   for(ind in 1:nAnimals) {#
   	   for(a in 1:34) {#
   	   	   # probability of animal i in time t, ages 1:33#
   	   	   alpha[2,ind,a] <- 1;#
   	   	   logit(prob[ind,a]) <- B[1] + B[2] * (a+9) + B[3] * pow((a+9),2) + B[4]*pow((a+9),3) + B[5]*pow((a+9),4);#
   	   	   alpha[1,ind,a] <- 1-prob[ind,a];#
   	   }#
   }#
   pDetect~dunif(0,1);#
   for(i in 1:nAnimals) {#
      for(j in 2:34) {#
         phi[i,j,1] <- alpha[z[i,j-1],i,j];#
         phi[i,j,2] <- 1 - alpha[z[i,j-1],i,j];#
         z[i,j] ~ dcat(phi[i,j,1:2]); # z[i] is the true state (2 = pregnant, 1 = not)#
         trueState[i,j] <- pDetect*(z[i,j] - 1); # convert to 0-1#
         Y[i,j] ~ dbern(trueState[i,j]);#
      }#
   }#
}#
#
", file = "model.txt")
mcmc.chainLength <- as.integer(10000)  # burn-in plus post-burn#
mcmc.burn = as.integer(5000)#
mcmc.thin = 1#
mcmc.chains = 4     # needs to be at least 2 for DIC#
#
jags.params=c("B","pDetect")#
jags.data = list("Y","z","nAnimals")#
model.loc = paste("model.txt",sep="")#
model = jags(jags.data, inits = NULL, parameters.to.save= jags.params, model.file=model.loc, n.chains = mcmc.chains, n.burnin = mcmc.burn, n.thin = mcmc.thin, n.iter = mcmc.chainLength, DIC = TRUE)#
#
attach.jags(model)
library(R2jags)
mcmc.chainLength <- as.integer(10000)  # burn-in plus post-burn#
mcmc.burn = as.integer(5000)#
mcmc.thin = 1#
mcmc.chains = 4     # needs to be at least 2 for DIC#
#
jags.params=c("B","pDetect")#
jags.data = list("Y","z","nAnimals")#
model.loc = paste("model.txt",sep="")#
model = jags(jags.data, inits = NULL, parameters.to.save= jags.params, model.file=model.loc, n.chains = mcmc.chains, n.burnin = mcmc.burn, n.thin = mcmc.thin, n.iter = mcmc.chainLength, DIC = TRUE)#
#
attach.jags(model)
z
z[2,5]
Y
d = read.csv("agsurvive.csv")#
moms = unique(d$Mom)#
moms = as.character(moms[which(moms!="?")])#
indx = match(moms,as.character(d$ID..from.Matkin.))#
moms = moms[-which(is.na(as.numeric(as.character(d$Birth.year[indx]))))] # drop moms that have birth year including "<"#
nAnimals = length(moms)#
# make matrix of ages from 0 - 42#
Y = matrix(0, nAnimals, 42)#
for(i in 1:nAnimals) {#
	indx = which(as.character(d$Mom)==moms[i])#
	ages = as.numeric(as.character(d$Birth.year[indx])) - as.numeric(as.character(d$Birth.year[which(d$ID..from.Matkin.==moms[i])])) # convert to age at birth#
    Y[i,ages] = 1#
}#
indx = which(apply(Y,1,sum)==0)#
Y = Y[-indx,]#
moms = moms[-indx]#
nAnimals = length(moms)
Y
moms
d = read.csv("agsurvive.csv")#
moms = unique(d$Mom)#
moms = as.character(moms[which(moms!="?")])#
indx = match(moms,as.character(d$ID..from.Matkin.))#
moms = moms[-which(is.na(as.numeric(as.character(d$Birth.year[indx]))))] # drop moms that have birth year including "<"#
nAnimals = length(moms)#
# make matrix of ages from 0 - 42#
Y = matrix(0, nAnimals, 42)#
for(i in 1:nAnimals) {#
	indx = which(as.character(d$Mom)==moms[i])#
	ages = as.numeric(as.character(d$Birth.year[indx])) - as.numeric(as.character(d$Birth.year[which(d$ID..from.Matkin.==moms[i])])) # convert to age at birth#
    Y[i,ages] = 1#
}#
indx = which(apply(Y,1,sum)==0)#
Y = Y[-indx,]#
moms = moms[-indx]#
nAnimals = length(moms)
Y
d = read.csv("agsurvive.csv")#
moms = unique(d$Mom)#
moms = as.character(moms[which(moms!="?")])#
indx = match(moms,as.character(d$ID..from.Matkin.))#
moms = moms[-which(is.na(as.numeric(as.character(d$Birth.year[indx]))))] # drop moms that have birth year including "<"#
nAnimals = length(moms)#
# make matrix of ages from 0 - 42#
Y = matrix(0, nAnimals, 42)#
for(i in 1:nAnimals) {#
	indx = which(as.character(d$Mom)==moms[i])#
	ages = as.numeric(as.character(d$Birth.year[indx])) - as.numeric(as.character(d$Birth.year[which(d$ID..from.Matkin.==moms[i])])) # convert to age at birth#
    Y[i,ages] = 1#
}#
indx = which(apply(Y,1,sum)==0)#
Y = Y[-indx,]#
moms = moms[-indx]#
nAnimals = length(moms)#
Y[2,13] = 0#
# Fill in the z matrix#
z = matrix(NA, nAnimals,42)#
for(i in 1:nAnimals) {#
	indx = which(Y[i,]==1)#
	z[i,indx] = 1#
	z[i,indx-1] = 0#
	z[i,indx+1] = 0#
}#
# truncate first 9 years#
z = z[,-c(1:8)]#
Y = Y[,-c(1:8)]#
z[,1] = 0 # 9 year olds can't give birth#
Y[,1] = NA#
z = z + 1
Y
z
model = cat("#
model {#
   # Set up occupancy modeling type framework for latent states#
   # state 1 = not pregnant#
   # state 2 = pregnant#
   #alpha[1] ~ dbeta(1,1);#prob of being in b 1 at t, given in b 1 at t-1(staying in state 1)#
   ## 1 minus alpha[1] = probability of switching out of state 1 to state 2 (becoming pregnant)#
   #alpha[2] <- 1;### prob of being in b 1 at t, given in b 2 at t-1 (switching from 2 to 1)#
   ## 1 minus alpha[2] = the probability of remaining in state 2 = 0#
   for(i in 1:5) {#
   		B[i]~dnorm(0,1);#
   }#
   for(ind in 1:nAnimals) {#
   	   for(a in 1:34) {#
   	   	   # probability of animal i in time t, ages 1:33#
   	   	   alpha[2,ind,a] <- 1;#
   	   	   logit(prob[ind,a]) <- B[1] + B[2] * (a+9) + B[3] * pow((a+9),2) + B[4]*pow((a+9),3) + B[5]*pow((a+9),4);#
   	   	   alpha[1,ind,a] <- 1-prob[ind,a];#
   	   }#
   }#
   pDetect~dunif(0,1);#
   for(i in 1:nAnimals) {#
      for(j in 2:34) {#
         phi[i,j,1] <- alpha[z[i,j-1],i,j];#
         phi[i,j,2] <- 1 - alpha[z[i,j-1],i,j];#
         z[i,j] ~ dcat(phi[i,j,1:2]); # z[i] is the true state (2 = pregnant, 1 = not)#
         trueState[i,j] <- pDetect*(z[i,j] - 1); # convert to 0-1#
         Y[i,j] ~ dbern(trueState[i,j]);#
      }#
   }#
}#
#
", file = "model.txt")#
mcmc.chainLength <- as.integer(10000)  # burn-in plus post-burn#
mcmc.burn = as.integer(5000)#
mcmc.thin = 1#
mcmc.chains = 4     # needs to be at least 2 for DIC#
#
jags.params=c("B","pDetect")#
jags.data = list("Y","z","nAnimals")#
model.loc = paste("model.txt",sep="")#
model = jags(jags.data, inits = NULL, parameters.to.save= jags.params, model.file=model.loc, n.chains = mcmc.chains, n.burnin = mcmc.burn, n.thin = mcmc.thin, n.iter = mcmc.chainLength, DIC = TRUE)#
#
attach.jags(model)
estBirth = matrix(0, dim(B)[1],34)#
for(i in 1:dim(estBirth)[1]) {#
	estBirth[i,] = B[i,1] + B[i,2]*seq(10,43) + B[i,3]*(seq(10,43)^2) + B[i,4]*(seq(10,43)^3) + B[i,5]*(seq(10,43)^4)#
}
estBirth = exp(estBirth)/(1+exp(estBirth))
dim(estBirth)
apply(estBirth[,2,median])
apply(estBirth,2,mean)
plot(apply(estBirth,2,mean))
seq(9,42)
length(seq(9,42))
plot(9:42,apply(estBirth,2,mean))
plot(9:42,apply(estBirth,2,mean),xlab="",ylab="Fecundity")#
lines(apply(estBirth,2,quantile,0.025),col="grey")#
lines(apply(estBirth,2,quantile,0.975),col="grey")
plot(9:42,apply(estBirth,2,mean),xlab="",ylab="Fecundity")#
lines(9:42,apply(estBirth,2,quantile,0.025),col="grey")#
lines(9:42,apply(estBirth,2,quantile,0.975),col="grey")
plot(9:42,apply(estBirth,2,mean),xlab="",ylab="Fecundity",ylim=c(0,0.5))#
lines(9:42,apply(estBirth,2,quantile,0.025),col="grey")#
lines(9:42,apply(estBirth,2,quantile,0.975),col="grey")
plot(9:42,apply(estBirth,2,mean),xlab="",ylab="Fecundity",ylim=c(0,0.5))#
lines(9:42,apply(estBirth,2,quantile,0.25),col="grey")#
lines(9:42,apply(estBirth,2,quantile,0.75),col="grey")
plot(9:42,apply(estBirth,2,mean),xlab="",ylab="Fecundity",ylim=c(0,0.5),type="l",lwd=3)#
lines(9:42,apply(estBirth,2,quantile,0.25),col="grey")#
lines(9:42,apply(estBirth,2,quantile,0.75),col="grey")
apply(estBirth,2,median)
apply(estBirth,2,mean)
plot(9:42,apply(estBirth,2,median),xlab="",ylab="Fecundity",ylim=c(0,0.5),type="l",lwd=3)#
lines(9:42,apply(estBirth,2,quantile,0.25),col="grey")#
lines(9:42,apply(estBirth,2,quantile,0.75),col="grey")
hist(pDetect)
hist(pDetect,100)
library(INLA)#
#### GO GET THE OBSERVED TRAWL DATA#
setwd("/Users/eric.ward/documents/exxonValdez_nceas/goaTrawl/")#
df = read.csv("goa_500trawls_albers.csv")#
df<-df[order(df$Year,df$Lat),]#
#
### Remove NA entries in BottomDepth and Bottom Temp for now#
df<-df[is.na(df$BottomDepth)==F,]#
df<-df[is.na(df$BottomTemp)==F,]#
#
df$Station = as.character(df$Station)#
df$Year = as.numeric(df$Year)#
df$LonUTMAlbers <- df$LonUTMAlbers/1000#
df$LatUTMAlbers <- df$LatUTMAlbers/1000#
#
#### GO GET THE PROJECTION POINTS#
dat.project	<- read.csv("goa_projection_points.csv")#
#
#### Exclude points that end up on land.#
dat.project$NGDC24_M	<-	-dat.project$NGDC24_M	#
dat.project$SRTM_M		<-	-dat.project$SRTM_M	#
dat.project				<-	dat.project[dat.project$NGDC24 > 0,]#
#
#### CHOOSE A MODEL#
model = "positive"#
species = names(df)[10:dim(df)[2]]#
speciesList = read.csv("species names.csv")#
species = species[which(speciesList[,2]==1)]#
#par(mfrow =c(6,5),mai=c(0.1,0.2,0.1,0.1))#
#for(i in 61:90) {#length(species)) {#
#	subdat = df[,c(1:9,which(names(df)==species[i]))]#
#	subdat[which(is.na(subdat[,10])),10] = 0#
#	agg = aggregate(ceiling(subdat[,10]/1.0e10),by=list(subdat$Year),mean,na.rm=T)#
#	plot(agg[,1],agg[,2],main=species[i],xlab="",ylab="",type="l",cex.main=0.6)#
#}
par(mfrow = c(8,4),mai=c(0.2,0.2,0.2,0.02))#
for(i in 1:length(species)) {#
  if(file.exists(paste(species[i],"_pos.Rdata",sep=""))) {#
    # Then load the file in #
    load(paste(species[i],"_pos.Rdata",sep=""))#
    meansd = Output[[2]]$summary.fixed[-c(1:2),1:2]#
    Xs = c(1984,1987,1990,1993,1996,1999,2001,2003,2005,2007,2009,2011)#
    lower = meansd[,1] - 2*meansd[,2]#
    upper = meansd[,1] + 2*meansd[,2]#
    plot(Xs,meansd[,1],ylim=c(min(lower),max(upper)),type="b",lwd=3,xlab="",ylab="log(CPUE)",main=species[i],cex.main=0.6)#
    lines(Xs,lower,col="grey")#
    lines(Xs,upper,col="grey")#
  }#
}
par(mfrow = c(8,4),mai=c(0.2,0.2,0.2,0.02))#
for(i in 1:length(species)) {#
  if(file.exists(paste(species[i],"_pos.Rdata",sep=""))) {#
    # Then load the file in #
    load(paste(species[i],"_pos.Rdata",sep=""))#
    meansd = Output[[2]]$summary.fixed[-c(1:2),1:2]#
    Xs = c(1984,1987,1990,1993,1996,1999,2001,2003,2005,2007,2009,2011)#
    lower = meansd[,1] - 2*meansd[,2]#
    upper = meansd[,1] + 2*meansd[,2]#
    plot(Xs,meansd[,1],ylim=c(min(lower),max(upper)),type="b",lwd=3,xlab="",ylab="log(CPUE)",main=species[i],cex.main=0.6)#
    lines(Xs,lower,col="grey")#
    lines(Xs,upper,col="grey")#
  }#
}
par(mfrow = c(8,4),mai=c(0.2,0.2,0.2,0.02),mgp=c(2,0.5,0))#
for(i in 1:length(species)) {#
  if(file.exists(paste(species[i],"_pos.Rdata",sep=""))) {#
    # Then load the file in #
    load(paste(species[i],"_pos.Rdata",sep=""))#
    meansd = Output[[2]]$summary.fixed[-c(1:2),1:2]#
    Xs = c(1984,1987,1990,1993,1996,1999,2001,2003,2005,2007,2009,2011)#
    lower = meansd[,1] - 2*meansd[,2]#
    upper = meansd[,1] + 2*meansd[,2]#
    plot(Xs,meansd[,1],ylim=c(min(lower),max(upper)),type="b",lwd=3,xlab="",ylab="log(CPUE)",main=species[i],cex.main=0.6)#
    lines(Xs,lower,col="grey")#
    lines(Xs,upper,col="grey")#
  }#
}
speciesList = read.csv("species names.csv")
names(speciesList)
model = "positive"#
species = names(df)[10:dim(df)[2]]#
speciesList = read.csv("species names.csv")#
species = species[which(speciesList[,2]==1)]#
comm = speciesList$Common.Name[which(speciesList[,2]==1)]
comm
par(mfrow = c(8,4),mai=c(0.2,0.2,0.2,0.02),mgp=c(2,0.5,0))#
for(i in 1:length(species)) {#
  if(file.exists(paste(species[i],"_pos.Rdata",sep=""))) {#
    # Then load the file in #
    load(paste(species[i],"_pos.Rdata",sep=""))#
    meansd = Output[[2]]$summary.fixed[-c(1:2),1:2]#
    Xs = c(1984,1987,1990,1993,1996,1999,2001,2003,2005,2007,2009,2011)#
    lower = meansd[,1] - 2*meansd[,2]#
    upper = meansd[,1] + 2*meansd[,2]#
    plot(Xs,meansd[,1],ylim=c(min(lower),max(upper)),type="b",lwd=3,xlab="",ylab="log(CPUE)",main=comm[i],cex.main=0.6)#
    lines(Xs,lower,col="grey")#
    lines(Xs,upper,col="grey")#
  }#
}
par(mfrow = c(8,4),mai=c(0.2,0.2,0.15,0.02),mgp=c(2,0.5,0))#
for(i in 1:3){#length(species)) {#
  if(file.exists(paste(species[i],"_pos.Rdata",sep=""))) {#
    # Then load the file in #
    load(paste(species[i],"_pos.Rdata",sep=""))#
    meansd = Output[[2]]$summary.fixed[-c(1:2),1:2]#
    Xs = c(1984,1987,1990,1993,1996,1999,2001,2003,2005,2007,2009,2011)#
    lower = meansd[,1] - 2*meansd[,2]#
    upper = meansd[,1] + 2*meansd[,2]#
    plot(Xs,meansd[,1],ylim=c(min(lower),max(upper)),type="b",lwd=3,xlab="",ylab="log(CPUE)",main=comm[i],cex.main=0.6)#
    lines(Xs,lower,col="grey")#
    lines(Xs,upper,col="grey")#
  }#
}
par(mfrow = c(8,4),mai=c(0.2,0.2,0.05,0.02),mgp=c(2,0.5,0))#
for(i in 1:3){#length(species)) {#
  if(file.exists(paste(species[i],"_pos.Rdata",sep=""))) {#
    # Then load the file in #
    load(paste(species[i],"_pos.Rdata",sep=""))#
    meansd = Output[[2]]$summary.fixed[-c(1:2),1:2]#
    Xs = c(1984,1987,1990,1993,1996,1999,2001,2003,2005,2007,2009,2011)#
    lower = meansd[,1] - 2*meansd[,2]#
    upper = meansd[,1] + 2*meansd[,2]#
    plot(Xs,meansd[,1],ylim=c(min(lower),max(upper)),type="b",lwd=3,xlab="",ylab="log(CPUE)",main=comm[i],cex.main=0.6)#
    lines(Xs,lower,col="grey")#
    lines(Xs,upper,col="grey")#
  }#
}
par(mfrow = c(8,4),mai=c(0.2,0.2,0.08,0.02),mgp=c(2,0.5,0))#
for(i in 1:3){#length(species)) {#
  if(file.exists(paste(species[i],"_pos.Rdata",sep=""))) {#
    # Then load the file in #
    load(paste(species[i],"_pos.Rdata",sep=""))#
    meansd = Output[[2]]$summary.fixed[-c(1:2),1:2]#
    Xs = c(1984,1987,1990,1993,1996,1999,2001,2003,2005,2007,2009,2011)#
    lower = meansd[,1] - 2*meansd[,2]#
    upper = meansd[,1] + 2*meansd[,2]#
    plot(Xs,meansd[,1],ylim=c(min(lower),max(upper)),type="b",lwd=3,xlab="",ylab="log(CPUE)",main=comm[i],cex.main=0.6)#
    lines(Xs,lower,col="grey")#
    lines(Xs,upper,col="grey")#
  }#
}
par(mfrow = c(8,4),mai=c(0.2,0.2,0.08,0.02),mgp=c(2,0.5,0))#
for(i in 1:3){#length(species)) {#
  if(file.exists(paste(species[i],"_pos.Rdata",sep=""))) {#
    # Then load the file in #
    load(paste(species[i],"_pos.Rdata",sep=""))#
    meansd = Output[[2]]$summary.fixed[-c(1:2),1:2]#
    Xs = c(1984,1987,1990,1993,1996,1999,2001,2003,2005,2007,2009,2011)#
    lower = meansd[,1] - 2*meansd[,2]#
    upper = meansd[,1] + 2*meansd[,2]#
    plot(Xs,meansd[,1],ylim=c(min(lower),max(upper)),type="b",lwd=3,xlab="",ylab="log(CPUE)",main=comm[i],cex.main=0.6,cex.axis=0.8)#
    lines(Xs,lower,col="grey")#
    lines(Xs,upper,col="grey")#
  }#
}
par(mfrow = c(8,4),mai=c(0.2,0.2,0.08,0.02),mgp=c(2,0.5,0))#
for(i in 1:3){#length(species)) {#
  if(file.exists(paste(species[i],"_pos.Rdata",sep=""))) {#
    # Then load the file in #
    load(paste(species[i],"_pos.Rdata",sep=""))#
    meansd = Output[[2]]$summary.fixed[-c(1:2),1:2]#
    Xs = c(1984,1987,1990,1993,1996,1999,2001,2003,2005,2007,2009,2011)#
    lower = meansd[,1] - 2*meansd[,2]#
    upper = meansd[,1] + 2*meansd[,2]#
    plot(Xs,meansd[,1],ylim=c(min(lower),max(upper)),type="b",lwd=3,xlab="",ylab="log(CPUE)",main=comm[i],cex.main=0.6,cex.axis=0.8)#
    polygon(c(Xs,rev(Xs)),c(lower,rev(upper)),border=NA,col="grey")#
    #lines(Xs,lower,col="grey")#
    #lines(Xs,upper,col="grey")#
  }#
}
par(mfrow = c(8,4),mai=c(0.2,0.2,0.08,0.02),mgp=c(2,0.5,0))#
for(i in 1:3){#length(species)) {#
  if(file.exists(paste(species[i],"_pos.Rdata",sep=""))) {#
    # Then load the file in #
    load(paste(species[i],"_pos.Rdata",sep=""))#
    meansd = Output[[2]]$summary.fixed[-c(1:2),1:2]#
    Xs = c(1984,1987,1990,1993,1996,1999,2001,2003,2005,2007,2009,2011)#
    lower = meansd[,1] - 2*meansd[,2]#
    upper = meansd[,1] + 2*meansd[,2]#
    plot(Xs,meansd[,1],ylim=c(min(lower),max(upper)),type="b",lwd=3,xlab="",ylab="log(CPUE)",main=comm[i],cex.main=0.6,cex.axis=0.8,col="white")#
    polygon(c(Xs,rev(Xs)),c(lower,rev(upper)),border=NA,col="grey")#
    lines(Xs,meansd[,1])#
    points(Xs,meansd[,1])#
    #lines(Xs,lower,col="grey")#
    #lines(Xs,upper,col="grey")#
  }#
}
par(mfrow = c(8,4),mai=c(0.2,0.2,0.08,0.02),mgp=c(2,0.5,0))#
for(i in 1:3){#length(species)) {#
  if(file.exists(paste(species[i],"_pos.Rdata",sep=""))) {#
    # Then load the file in #
    load(paste(species[i],"_pos.Rdata",sep=""))#
    meansd = Output[[2]]$summary.fixed[-c(1:2),1:2]#
    Xs = c(1984,1987,1990,1993,1996,1999,2001,2003,2005,2007,2009,2011)#
    lower = meansd[,1] - 2*meansd[,2]#
    upper = meansd[,1] + 2*meansd[,2]#
    plot(Xs,meansd[,1],ylim=c(min(lower),max(upper)),type="b",lwd=3,xlab="",ylab="log(CPUE)",main=comm[i],cex.main=0.6,cex.axis=0.8,col="white")#
    polygon(c(Xs,rev(Xs)),c(lower,rev(upper)),border=NA,col="tomato1")#
    lines(Xs,meansd[,1])#
    points(Xs,meansd[,1])#
    #lines(Xs,lower,col="grey")#
    #lines(Xs,upper,col="grey")#
  }#
}
par(mfrow = c(8,4),mai=c(0.2,0.2,0.08,0.02),mgp=c(2,0.5,0))#
for(i in 1:3){#length(species)) {#
  if(file.exists(paste(species[i],"_pos.Rdata",sep=""))) {#
    # Then load the file in #
    load(paste(species[i],"_pos.Rdata",sep=""))#
    meansd = Output[[2]]$summary.fixed[-c(1:2),1:2]#
    Xs = c(1984,1987,1990,1993,1996,1999,2001,2003,2005,2007,2009,2011)#
    lower = meansd[,1] - 2*meansd[,2]#
    upper = meansd[,1] + 2*meansd[,2]#
    plot(Xs,meansd[,1],ylim=c(min(lower),max(upper)),type="b",lwd=3,xlab="",ylab="log(CPUE)",main=comm[i],cex.main=0.6,cex.axis=0.8,col="white")#
    polygon(c(Xs,rev(Xs)),c(lower,rev(upper)),border=NA,col="tomato1")#
    lines(Xs,meansd[,1])#
    points(Xs,meansd[,1])#
    lines(c(1989,1989),c(-10,10),lty=3)#
    #lines(Xs,lower,col="grey")#
    #lines(Xs,upper,col="grey")#
  }#
}
pdf("Annual fixed effects.pdf")#
par(mfrow = c(8,4),mai=c(0.2,0.2,0.08,0.02),mgp=c(2,0.5,0))#
for(i in 1:length(species)) {#
  if(file.exists(paste(species[i],"_pos.Rdata",sep=""))) {#
    # Then load the file in #
    load(paste(species[i],"_pos.Rdata",sep=""))#
    meansd = Output[[2]]$summary.fixed[-c(1:2),1:2]#
    Xs = c(1984,1987,1990,1993,1996,1999,2001,2003,2005,2007,2009,2011)#
    lower = meansd[,1] - 2*meansd[,2]#
    upper = meansd[,1] + 2*meansd[,2]#
    plot(Xs,meansd[,1],ylim=c(min(lower),max(upper)),type="b",lwd=3,xlab="",ylab="log(CPUE)",main=comm[i],cex.main=0.6,cex.axis=0.8,col="white")#
    polygon(c(Xs,rev(Xs)),c(lower,rev(upper)),border=NA,col="tomato1")#
    lines(Xs,meansd[,1])#
    points(Xs,meansd[,1])#
    lines(c(1989,1989),c(-10,10),lty=3)#
    #lines(Xs,lower,col="grey")#
    #lines(Xs,upper,col="grey")#
  }#
}#
dev.off()
source("trawl_plot_positive.r")
install.packages("rgdal")
NAME	<-	paste(species[i], "Positive Preliminary plots.pdf")#
pdf(NAME,onefile=TRUE,width=15,5)#
#
## Plot against the covariates #
ZZ	<- subdat[,species[i]]#
# ZZ[is.na(ZZ)==T] <- 0#
#
par(mfrow=c(1,2))#
plot(y=ZZ,x=subdat$BottomTemp,xlab="Bottom Temperature (C)",ylab="CPUE",axes=F)#
axis(1)#
axis(2,las=2)#
box(bty="o",lwd=2)#
title(species[i])
## Plot against the covariates #
ZZ	<- subdat[,species[i]]#
# ZZ[is.na(ZZ)==T] <- 0
# Fit the model for species XX#
  subdat = df[,c(1:9,which(names(df)==species[i]))]#
  #Center the covariates #
  Covar	<- subdat[,1:9]#
  Covar$log.depth			<-	log(Covar$BottomDepth)#
  Covar$cent.log.depth	<-	Covar$log.depth - mean(Covar$log.depth,na.rm=T)#
  Covar$cent.log.depth.2	<-	Covar$log.depth^2 #
  Covar$cent.temp			<-	Covar$BottomTemp - mean(Covar$BottomTemp)#
  Covar$cent.temp.2		<-	Covar$cent.temp^2 #
	#call basic plotting routine for raw data#
	  #if(model == "binomial"){#
	  #	source("trawl_plot_binom.r")#
	  #}#
	#call basic plotting routine for raw data#
	  #if(model == "positive"){#
	  #	source("trawl_plot_positive.r")#
	  #}#
#
  # Grab X-Y coords in UTM space#
  subcoords = cbind(subdat$LonUTMAlbers[match(unique(subdat$Station),subdat$Station)],subdat$LatUTMAlbers[match(unique(subdat$Station),subdat$Station)])#
  bnd = inla.nonconvex.hull(subcoords, convex=80)#
  mesh1 = inla.mesh.2d(boundary=bnd,max.edge=c(100,1200),cutoff=90)#
  # "cutoff" parameter is used to avoid building many small triangles around clustered input locations, #
  # "offset" species the size of the inner and outer extensions around the data locations,#
  # "max.edge" species the maximum allowed triangle edge lengths in the inner domain and in the outer extension.
NAME	<-	paste(species[i], "Positive Preliminary plots.pdf")#
pdf(NAME,onefile=TRUE,width=15,5)
## Plot against the covariates #
ZZ	<- subdat[,species[i]]#
# ZZ[is.na(ZZ)==T] <- 0#
#
par(mfrow=c(1,2))#
plot(y=ZZ,x=subdat$BottomTemp,xlab="Bottom Temperature (C)",ylab="CPUE",axes=F)#
axis(1)#
axis(2,las=2)#
box(bty="o",lwd=2)#
title(species[i])#
#
plot(y=ZZ,x=log(subdat$BottomDepth),xlab="log(Depth (m))",ylab="CPUE",axes=F)#
axis(1)#
axis(2,las=2)#
box(bty="o",lwd=2)#
title(species[i])
dev.off()
myWD = "/Users/eric.ward/documents/exxonValdez_nceas/goaTrawl/"#
#
setwd(myWD)#
df = read.csv("goa_500trawls_albers.csv")#
df<-df[order(df$Year,df$Lat),]#
#
### Remove NA entries in BottomDepth and Bottom Temp for now#
df<-df[is.na(df$BottomDepth)==F,]#
df<-df[is.na(df$BottomTemp)==F,]#
#
df$Station = as.character(df$Station)#
df$Year = as.numeric(df$Year)#
df$LonUTMAlbers <- df$LonUTMAlbers/1000#
df$LatUTMAlbers <- df$LatUTMAlbers/1000#
#
#### GO GET THE PROJECTION POINTS#
dat.project	<- read.csv("goa_projection_points.csv")#
#
#### Exclude points that end up on land.#
dat.project$NGDC24_M	<-	-dat.project$NGDC24_M	#
dat.project$SRTM_M		<-	-dat.project$SRTM_M	#
dat.project				<-	dat.project[dat.project$NGDC24 > 0,]#
#
#### CHOOSE A MODEL#
model = "positive"#
species = names(df)[10:dim(df)[2]]#
speciesList = read.csv("species names.csv")#
species = species[which(speciesList[,2]==1)]#
comm = speciesList$Common.Name[which(speciesList[,2]==1)]#
#
#par(mfrow =c(6,5),mai=c(0.1,0.2,0.1,0.1))#
#for(i in 61:90) {#length(species)) {#
#	subdat = df[,c(1:9,which(names(df)==species[i]))]#
#	subdat[which(is.na(subdat[,10])),10] = 0#
#	agg = aggregate(ceiling(subdat[,10]/1.0e10),by=list(subdat$Year),mean,na.rm=T)#
#	plot(agg[,1],agg[,2],main=species[i],xlab="",ylab="",type="l",cex.main=0.6)#
#}
myWD = "/Users/eric.ward/documents/exxonValdez_nceas/goaTrawl/"#
#
setwd(myWD)#
df = read.csv("goa_500trawls_albers.csv")#
df<-df[order(df$Year,df$Lat),]#
#
### Remove NA entries in BottomDepth and Bottom Temp for now#
df<-df[is.na(df$BottomDepth)==F,]#
df<-df[is.na(df$BottomTemp)==F,]#
#
df$Station = as.character(df$Station)#
df$Year = as.numeric(df$Year)#
df$LonUTMAlbers <- df$LonUTMAlbers/1000#
df$LatUTMAlbers <- df$LatUTMAlbers/1000#
#
#### GO GET THE PROJECTION POINTS#
dat.project	<- read.csv("goa_projection_points.csv")#
#
#### Exclude points that end up on land.#
dat.project$NGDC24_M	<-	-dat.project$NGDC24_M	#
dat.project$SRTM_M		<-	-dat.project$SRTM_M	#
dat.project				<-	dat.project[dat.project$NGDC24 > 0,]#
#
#### CHOOSE A MODEL#
model = "positive"#
species = names(df)[10:dim(df)[2]]#
speciesList = read.csv("species names.csv")#
species = species[which(speciesList[,2]==1)]#
comm = speciesList$Common.Name[which(speciesList[,2]==1)]#
#
#par(mfrow =c(6,5),mai=c(0.1,0.2,0.1,0.1))#
#for(i in 61:90) {#length(species)) {#
#	subdat = df[,c(1:9,which(names(df)==species[i]))]#
#	subdat[which(is.na(subdat[,10])),10] = 0#
#	agg = aggregate(ceiling(subdat[,10]/1.0e10),by=list(subdat$Year),mean,na.rm=T)#
#	plot(agg[,1],agg[,2],main=species[i],xlab="",ylab="",type="l",cex.main=0.6)#
#}#
fitModel = FALSE
i = 1
# Fit the model for species XX#
  subdat = df[,c(1:9,which(names(df)==species[i]))]#
  #Center the covariates #
  Covar	<- subdat[,1:9]#
  Covar$log.depth			<-	log(Covar$BottomDepth)#
  Covar$cent.log.depth	<-	Covar$log.depth - mean(Covar$log.depth,na.rm=T)#
  Covar$cent.log.depth.2	<-	Covar$log.depth^2 #
  Covar$cent.temp			<-	Covar$BottomTemp - mean(Covar$BottomTemp)#
  Covar$cent.temp.2		<-	Covar$cent.temp^2 #
	#call basic plotting routine for raw data#
	  #if(model == "binomial"){#
	  #	source("trawl_plot_binom.r")#
	  #}#
	#call basic plotting routine for raw data#
	  if(model == "positive"){#
	  	source("trawl_plot_positive.r")#
	  }#
#
  # Grab X-Y coords in UTM space#
  subcoords = cbind(subdat$LonUTMAlbers[match(unique(subdat$Station),subdat$Station)],subdat$LatUTMAlbers[match(unique(subdat$Station),subdat$Station)])#
  bnd = inla.nonconvex.hull(subcoords, convex=80)#
  mesh1 = inla.mesh.2d(boundary=bnd,max.edge=c(100,1200),cutoff=90)#
  # "cutoff" parameter is used to avoid building many small triangles around clustered input locations, #
  # "offset" species the size of the inner and outer extensions around the data locations,#
  # "max.edge" species the maximum allowed triangle edge lengths in the inner domain and in the outer extension.#
  #mesh1 = inla.mesh.2d(subcoords,max.edge=c(150,150),cutoff=50)#
  #plot(mesh1)#
  #points(subcoords,col="red")#
  # Make SPDE based on mesh#
  spde=inla.spde2.matern(mesh1, alpha=3/2)#
  n= max(as.numeric(as.factor(as.character(subdat$Station)))) # unique stations#
  subdat$yearID = match(subdat$Year,as.numeric(names(table(subdat$Year))))#
  subdat$stationID = as.numeric(as.factor(subdat$Station))#
  k = max(subdat$yearID)#
  ymat = matrix(NA,n,k)#
  ymat01 = matrix(0,n,k)#
  cent.log.depth = matrix(NA,n,k)#
  cent.temp = matrix(NA,n,k)#
  #yearF = matrix(0,n,k)#
  for(j in 1:dim(subdat)[1]) {#
    if(is.na(subdat[j,10])==F & subdat[j,10]>0) ymat[subdat$stationID[j],subdat$yearID[j]] = subdat[j,10] # species always in col 10#
    if(is.na(subdat[j,10])==F) ymat01[subdat$stationID[j],subdat$yearID[j]] = ceiling(subdat[i,10]/1.0e10) # convert to 0/1#
    # include depth, depth2, temp, temp2 as fixed effects#
    cent.temp[subdat$stationID[j],subdat$yearID[j]] = Covar$cent.temp[j]#
    cent.log.depth[subdat$stationID[j],subdat$yearID[j]] = Covar$cent.log.depth[j]#
    # Include year as fixed effect design matrix#
    #yearF[subdat$stationID[j],subdat$yearID[j]] = 1#
  }#
  	# make depth and temperature values for unobserved locations #
	# (calculate mean for each station and replace missing values with average covariate value)#
	temp.depth	<- rowMeans(cent.log.depth,na.rm=T)#
	temp.temp	<- rowMeans(cent.temp,na.rm=T)#
#
	for(j in 1:n){#
		cent.log.depth[j,][is.na(cent.log.depth[j,])==T]	<-	 temp.depth[j]#
		cent.temp[j,][is.na(cent.temp[j,])==T]	<-	 temp.temp[j]#
	}#
  if(model == "binomial") {#
    z = ymat01#
  }#
  if(model != "binomial") {#
    z = log(ymat)#
  }#
  #dat <- data.frame(y=as.vector((z)), time=rep(1:k, each=n), xcoo=rep(subcoords[,1], k),ycoo=rep(subcoords[,2], k), cent.temp = as.vector(cent.temp), cent.temp2 = as.vector(cent.temp^2),#
  #cent.log.depth=as.vector(cent.log.depth),cent.log.depth2=as.vector(cent.log.depth^2))#
  dat <- data.frame(y=as.vector((z)), time=rep(1:k, each=n), xcoo=rep(subcoords[,1], k),ycoo=rep(subcoords[,2], k),cent.log.depth=as.vector(cent.log.depth),cent.log.depth2=as.vector(cent.log.depth^2))#
  if(fitModel==TRUE) {  #
  # Make a design matrix where the first year is the intercept, tack on year effects#
  YEARS <- paste("Y",names(table(subdat$Year)),sep="")#
  dat[YEARS] = 0	#
  dat[,YEARS[1]]	<-	1#
  for(j in 1:length(YEARS)){#
		dat[dat$time == j,YEARS[j]]	<-	1#
  }#
  iset = inla.spde.make.index("i2D", n.spde=mesh1$n, n.group = k)  #
  # Make the covariates#
  X.1 = dat[,-c(1:4)]#
  Covar.names <- colnames(X.1)#
   XX.list <- as.list(X.1)#
   effect.list <- list()						#
   effect.list[[1]] <- c(iset, list(Intercept=1))#
   for (j in 1:ncol(X.1)) effect.list[[j+1]] <- XX.list[[j]]#
   names(effect.list) <- c("1", Covar.names)#
#
   A <- inla.spde.make.A(mesh=mesh1, loc=cbind(dat$xcoo, dat$ycoo),group = dat$time)#
   A.list = list()#
   A.list[[1]] = A#
   for (j in 1:ncol(X.1)) A.list[[j+1]] <- 1#
   sdat <- inla.stack(tag='stdata', data=list(y=dat$y), A=A.list, effects=effect.list)#
#
  formula = as.formula(paste0("y ~ -1 +",  paste(Covar.names, collapse="+"), "+ f(i2D, model=spde, group = i2D.group, control.group = list(model='ar1'))"))		# field evolves with AR1 by year#
#
  if(model=="binomial") {#
    inlaModel <- inla(formula, family = "binomial", data=inla.stack.data(sdat),control.predictor=list(compute=TRUE, A=inla.stack.A(sdat)), verbose = FALSE, debug=FALSE, keep=FALSE,control.compute = list(dic=TRUE, cpo=TRUE), control.fixed = list(correlation.matrix=TRUE))#
    save.image(paste(species[i],"_binomial.Rdata",sep=""))# Save this fitted thing to a workspace#
  }#
  if(model!="binomial") {#
    inlaModel <- inla(formula, family = "gaussian", data=inla.stack.data(sdat),control.predictor=list(compute=TRUE, A=inla.stack.A(sdat)), verbose = FALSE, debug=FALSE, keep=FALSE,control.compute = list(dic=TRUE, cpo=TRUE), control.fixed = list(correlation.matrix=TRUE),control.results=list(return.marginals.random=F))#
    #save.image(paste(species[i],"_pos.Rdata",sep=""))# Save this fitted thing to a workspace#
        #inlaModel <- inla(formula, family = "gamma", data=inla.stack.data(sdat),control.predictor=list(compute=TRUE, A=inla.stack.A(sdat)), verbose = TRUE, debug=TRUE, keep=FALSE,control.compute = list(dic=TRUE, cpo=TRUE), control.fixed = list(correlation.matrix=TRUE), control.results=list(return.marginals.random=F,return.marginals.fixed=F),control.inla(lincomb.derived.correlation.matrix = TRUE))#
Output<-list( Data=df,INLA.mod = inlaModel,Covar=Covar,Mesh=mesh1,Mesh=mesh1,iset=iset)#
save(Output,file=paste(species[i],"_pos.Rdata",sep=""))# Save this fitted thing to a workspace#
   }#
  }  #
}#
#
pdf("Annual fixed effects.pdf")#
par(mfrow = c(8,4),mai=c(0.2,0.2,0.08,0.02),mgp=c(2,0.5,0))#
for(i in 1:length(species)) {#
  if(file.exists(paste(species[i],"_pos.Rdata",sep=""))) {#
    # Then load the file in #
    load(paste(species[i],"_pos.Rdata",sep=""))#
    meansd = Output[[2]]$summary.fixed[-c(1:2),1:2]#
    Xs = c(1984,1987,1990,1993,1996,1999,2001,2003,2005,2007,2009,2011)#
    lower = meansd[,1] - 2*meansd[,2]#
    upper = meansd[,1] + 2*meansd[,2]#
    plot(Xs,meansd[,1],ylim=c(min(lower),max(upper)),type="b",lwd=3,xlab="",ylab="log(CPUE)",main=comm[i],cex.main=0.6,cex.axis=0.8,col="white")#
    polygon(c(Xs,rev(Xs)),c(lower,rev(upper)),border=NA,col="tomato1")#
    lines(Xs,meansd[,1])#
    points(Xs,meansd[,1])#
    lines(c(1989,1989),c(-10,10),lty=3)#
    #lines(Xs,lower,col="grey")#
    #lines(Xs,upper,col="grey")#
  }#
}
library(rgdal)#
library(sp)#
library(ggplot2)
myWD = "/Users/eric.ward/documents/exxonValdez_nceas/goaTrawl/"#
#
setwd(myWD)#
df = read.csv("goa_500trawls_albers.csv")#
df<-df[order(df$Year,df$Lat),]#
#
### Remove NA entries in BottomDepth and Bottom Temp for now#
df<-df[is.na(df$BottomDepth)==F,]#
df<-df[is.na(df$BottomTemp)==F,]#
#
df$Station = as.character(df$Station)#
df$Year = as.numeric(df$Year)#
df$LonUTMAlbers <- df$LonUTMAlbers/1000#
df$LatUTMAlbers <- df$LatUTMAlbers/1000#
#
#### GO GET THE PROJECTION POINTS#
dat.project	<- read.csv("goa_projection_points.csv")#
#
#### Exclude points that end up on land.#
dat.project$NGDC24_M	<-	-dat.project$NGDC24_M	#
dat.project$SRTM_M		<-	-dat.project$SRTM_M	#
dat.project				<-	dat.project[dat.project$NGDC24 > 0,]#
#
#### CHOOSE A MODEL#
model = "positive"#
species = names(df)[10:dim(df)[2]]#
speciesList = read.csv("species names.csv")#
species = species[which(speciesList[,2]==1)]#
comm = speciesList$Common.Name[which(speciesList[,2]==1)]#
#
#par(mfrow =c(6,5),mai=c(0.1,0.2,0.1,0.1))#
#for(i in 61:90) {#length(species)) {#
#	subdat = df[,c(1:9,which(names(df)==species[i]))]#
#	subdat[which(is.na(subdat[,10])),10] = 0#
#	agg = aggregate(ceiling(subdat[,10]/1.0e10),by=list(subdat$Year),mean,na.rm=T)#
#	plot(agg[,1],agg[,2],main=species[i],xlab="",ylab="",type="l",cex.main=0.6)#
#}#
fitModel = FALSE
# Fit the model for species XX#
  subdat = df[,c(1:9,which(names(df)==species[i]))]#
  #Center the covariates #
  Covar	<- subdat[,1:9]#
  Covar$log.depth			<-	log(Covar$BottomDepth)#
  Covar$cent.log.depth	<-	Covar$log.depth - mean(Covar$log.depth,na.rm=T)#
  Covar$cent.log.depth.2	<-	Covar$log.depth^2 #
  Covar$cent.temp			<-	Covar$BottomTemp - mean(Covar$BottomTemp)#
  Covar$cent.temp.2		<-	Covar$cent.temp^2 #
	#call basic plotting routine for raw data#
	  #if(model == "binomial"){#
	  #	source("trawl_plot_binom.r")#
	  #}#
	#call basic plotting routine for raw data#
	  if(model == "positive"){#
	  	source("trawl_plot_positive.r")#
	  }
setwd(paste(myWD,"Output plots/_Alaska Shapefile",sep=""))#
shp.alaska	 <-	readOGR(dsn=".",layer="Alaska-Albers")
?readOGR
library(rgdal)
install.packages("rgdal")
library(rgdal)
install.packages("rgdal")
install.packages("rgdal")
run: install.packages('rgdal',repos="http://www.stats.ox.ac.uk/pub/RWin")
install.packages('rgdal',repos="http://www.stats.ox.ac.uk/pub/RWin")
library(rgdal)
setwd(paste(myWD,"Output plots/_Alaska Shapefile",sep=""))#
shp.alaska	 <-	readOGR(dsn=".",layer="Alaska-Albers")#
dat.alaska   <- fortify(shp.alaska,"data.frame")
#call basic plotting routine for raw data#
	  if(model == "positive"){#
	  	source("trawl_plot_positive.r")#
	  }
getwd()
setwd(myWD)
setwd(myWD)#
	#call basic plotting routine for raw data#
	  #if(model == "binomial"){#
	  #	source("trawl_plot_binom.r")#
	  #}#
	#call basic plotting routine for raw data#
	  if(model == "positive"){#
	  	source("trawl_plot_positive.r")#
	  }
for(i in 1:length(species)) {#
  # Fit the model for species XX#
  subdat = df[,c(1:9,which(names(df)==species[i]))]#
  #Center the covariates #
  Covar	<- subdat[,1:9]#
  Covar$log.depth			<-	log(Covar$BottomDepth)#
  Covar$cent.log.depth	<-	Covar$log.depth - mean(Covar$log.depth,na.rm=T)#
  Covar$cent.log.depth.2	<-	Covar$log.depth^2 #
  Covar$cent.temp			<-	Covar$BottomTemp - mean(Covar$BottomTemp)#
  Covar$cent.temp.2		<-	Covar$cent.temp^2 #
  setwd(myWD)#
	#call basic plotting routine for raw data#
	  #if(model == "binomial"){#
	  #	source("trawl_plot_binom.r")#
	  #}#
	#call basic plotting routine for raw data#
	  if(model == "positive"){#
	  	source("trawl_plot_positive.r")#
	  }#
#
  # Grab X-Y coords in UTM space#
  subcoords = cbind(subdat$LonUTMAlbers[match(unique(subdat$Station),subdat$Station)],subdat$LatUTMAlbers[match(unique(subdat$Station),subdat$Station)])#
  bnd = inla.nonconvex.hull(subcoords, convex=80)#
  mesh1 = inla.mesh.2d(boundary=bnd,max.edge=c(100,1200),cutoff=90)#
  # "cutoff" parameter is used to avoid building many small triangles around clustered input locations, #
  # "offset" species the size of the inner and outer extensions around the data locations,#
  # "max.edge" species the maximum allowed triangle edge lengths in the inner domain and in the outer extension.#
  #mesh1 = inla.mesh.2d(subcoords,max.edge=c(150,150),cutoff=50)#
  #plot(mesh1)#
  #points(subcoords,col="red")#
  # Make SPDE based on mesh#
  spde=inla.spde2.matern(mesh1, alpha=3/2)#
  n= max(as.numeric(as.factor(as.character(subdat$Station)))) # unique stations#
  subdat$yearID = match(subdat$Year,as.numeric(names(table(subdat$Year))))#
  subdat$stationID = as.numeric(as.factor(subdat$Station))#
  k = max(subdat$yearID)#
  ymat = matrix(NA,n,k)#
  ymat01 = matrix(0,n,k)#
  cent.log.depth = matrix(NA,n,k)#
  cent.temp = matrix(NA,n,k)#
  #yearF = matrix(0,n,k)#
  for(j in 1:dim(subdat)[1]) {#
    if(is.na(subdat[j,10])==F & subdat[j,10]>0) ymat[subdat$stationID[j],subdat$yearID[j]] = subdat[j,10] # species always in col 10#
    if(is.na(subdat[j,10])==F) ymat01[subdat$stationID[j],subdat$yearID[j]] = ceiling(subdat[i,10]/1.0e10) # convert to 0/1#
    # include depth, depth2, temp, temp2 as fixed effects#
    cent.temp[subdat$stationID[j],subdat$yearID[j]] = Covar$cent.temp[j]#
    cent.log.depth[subdat$stationID[j],subdat$yearID[j]] = Covar$cent.log.depth[j]#
    # Include year as fixed effect design matrix#
    #yearF[subdat$stationID[j],subdat$yearID[j]] = 1#
  }#
  	# make depth and temperature values for unobserved locations #
	# (calculate mean for each station and replace missing values with average covariate value)#
	temp.depth	<- rowMeans(cent.log.depth,na.rm=T)#
	temp.temp	<- rowMeans(cent.temp,na.rm=T)#
#
	for(j in 1:n){#
		cent.log.depth[j,][is.na(cent.log.depth[j,])==T]	<-	 temp.depth[j]#
		cent.temp[j,][is.na(cent.temp[j,])==T]	<-	 temp.temp[j]#
	}#
  if(model == "binomial") {#
    z = ymat01#
  }#
  if(model != "binomial") {#
    z = log(ymat)#
  }#
  #dat <- data.frame(y=as.vector((z)), time=rep(1:k, each=n), xcoo=rep(subcoords[,1], k),ycoo=rep(subcoords[,2], k), cent.temp = as.vector(cent.temp), cent.temp2 = as.vector(cent.temp^2),#
  #cent.log.depth=as.vector(cent.log.depth),cent.log.depth2=as.vector(cent.log.depth^2))#
  dat <- data.frame(y=as.vector((z)), time=rep(1:k, each=n), xcoo=rep(subcoords[,1], k),ycoo=rep(subcoords[,2], k),cent.log.depth=as.vector(cent.log.depth),cent.log.depth2=as.vector(cent.log.depth^2))#
  if(fitModel==TRUE) {  #
  # Make a design matrix where the first year is the intercept, tack on year effects#
  YEARS <- paste("Y",names(table(subdat$Year)),sep="")#
  dat[YEARS] = 0	#
  dat[,YEARS[1]]	<-	1#
  for(j in 1:length(YEARS)){#
		dat[dat$time == j,YEARS[j]]	<-	1#
  }#
  iset = inla.spde.make.index("i2D", n.spde=mesh1$n, n.group = k)  #
  # Make the covariates#
  X.1 = dat[,-c(1:4)]#
  Covar.names <- colnames(X.1)#
   XX.list <- as.list(X.1)#
   effect.list <- list()						#
   effect.list[[1]] <- c(iset, list(Intercept=1))#
   for (j in 1:ncol(X.1)) effect.list[[j+1]] <- XX.list[[j]]#
   names(effect.list) <- c("1", Covar.names)#
#
   A <- inla.spde.make.A(mesh=mesh1, loc=cbind(dat$xcoo, dat$ycoo),group = dat$time)#
   A.list = list()#
   A.list[[1]] = A#
   for (j in 1:ncol(X.1)) A.list[[j+1]] <- 1#
   sdat <- inla.stack(tag='stdata', data=list(y=dat$y), A=A.list, effects=effect.list)#
#
  formula = as.formula(paste0("y ~ -1 +",  paste(Covar.names, collapse="+"), "+ f(i2D, model=spde, group = i2D.group, control.group = list(model='ar1'))"))		# field evolves with AR1 by year#
#
  if(model=="binomial") {#
    inlaModel <- inla(formula, family = "binomial", data=inla.stack.data(sdat),control.predictor=list(compute=TRUE, A=inla.stack.A(sdat)), verbose = FALSE, debug=FALSE, keep=FALSE,control.compute = list(dic=TRUE, cpo=TRUE), control.fixed = list(correlation.matrix=TRUE))#
    save.image(paste(species[i],"_binomial.Rdata",sep=""))# Save this fitted thing to a workspace#
  }#
  if(model!="binomial") {#
    inlaModel <- inla(formula, family = "gaussian", data=inla.stack.data(sdat),control.predictor=list(compute=TRUE, A=inla.stack.A(sdat)), verbose = FALSE, debug=FALSE, keep=FALSE,control.compute = list(dic=TRUE, cpo=TRUE), control.fixed = list(correlation.matrix=TRUE),control.results=list(return.marginals.random=F))#
    #save.image(paste(species[i],"_pos.Rdata",sep=""))# Save this fitted thing to a workspace#
        #inlaModel <- inla(formula, family = "gamma", data=inla.stack.data(sdat),control.predictor=list(compute=TRUE, A=inla.stack.A(sdat)), verbose = TRUE, debug=TRUE, keep=FALSE,control.compute = list(dic=TRUE, cpo=TRUE), control.fixed = list(correlation.matrix=TRUE), control.results=list(return.marginals.random=F,return.marginals.fixed=F),control.inla(lincomb.derived.correlation.matrix = TRUE))#
Output<-list( Data=df,INLA.mod = inlaModel,Covar=Covar,Mesh=mesh1,Mesh=mesh1,iset=iset)#
save(Output,file=paste(species[i],"_pos.Rdata",sep=""))# Save this fitted thing to a workspace#
   }#
  }  #
}#
#
pdf("Annual fixed effects.pdf")#
par(mfrow = c(8,4),mai=c(0.2,0.2,0.08,0.02),mgp=c(2,0.5,0))#
for(i in 1:length(species)) {#
  if(file.exists(paste(species[i],"_pos.Rdata",sep=""))) {#
    # Then load the file in #
    load(paste(species[i],"_pos.Rdata",sep=""))#
    meansd = Output[[2]]$summary.fixed[-c(1:2),1:2]#
    Xs = c(1984,1987,1990,1993,1996,1999,2001,2003,2005,2007,2009,2011)#
    lower = meansd[,1] - 2*meansd[,2]#
    upper = meansd[,1] + 2*meansd[,2]#
    plot(Xs,meansd[,1],ylim=c(min(lower),max(upper)),type="b",lwd=3,xlab="",ylab="log(CPUE)",main=comm[i],cex.main=0.6,cex.axis=0.8,col="white")#
    polygon(c(Xs,rev(Xs)),c(lower,rev(upper)),border=NA,col="tomato1")#
    lines(Xs,meansd[,1])#
    points(Xs,meansd[,1])#
    lines(c(1989,1989),c(-10,10),lty=3)#
    #lines(Xs,lower,col="grey")#
    #lines(Xs,upper,col="grey")#
  }#
}#
dev.off()
